name: memudei-api
proxy:
  lambda-proxy:
    - memudei-api.lndo.site:80
  ngrok:
    - ngrok.lndo.site:4551

env_file:
  - lando/.env.lambda

services:
  # lambda service runs PayIn API lambda function service. It acts as AWS Lambda
  lambda-proxy:
    type: node:16
    app_mount: false
    scanner: false
    ssl: false
    command:
      - /bin/bash -c /opt/lando/start-lambda-proxy.sh
    port: 80
    build_as_root:
      - apt-get update -y
      - apt-get install -y jq
    build:
      - npm i -g lambda-local
      - npm i -g nodemon
      - npm i -g koa
      - npm i -g koa-bodyparser
    overrides:
      environment:
        LOG_LEVEL: debug
        AUTH_VENDOR: AUTH0
        CLOUD_VENDOR: LOCALSTACK
        CLOUD_ACCESS_KEY_ID: 
        CLOUD_SECRET_ACCESS_KEY: 
        CLOUD_REGION: us-east-1
        CLOUD_ENDPOINT: http://127.0.0.1:4566
        STORAGE_VENDOR: S3
        STORAGE_BUCKET: memudei-bucket
        DATABASE_VENDOR: POSTGRES
        DATABASE_URL: postgres://me_mudei:postgres@localhost:11229/me_mudei
      ports:
        - 9229:9229
      depends_on:
        - ngrok
      volumes:
        #- ./build:/app/.build
        #- ./node_modules:/app/node_modules
        #- ./package.json:/app/package.json
        - .:/app
        - ./lando:/opt/lando
  # pg service is a  PostrgresSQL database
  pg:
    build_as_root:
      - chmod -R 777 /tmp
    type: postgres:13
    # can be accessed through the host at http://localhost:11996
    portforward: 11996

  #ngrok service makes the API available publicly so webhook can be tunnel to the lambda-proxy
  ngrok:
    type: compose
    app_mount: false
    scanner: false
    services:
      image: shkoliar/ngrok
      command:
        - "ngrok"
        - "http"
        - "lambda-proxy:80"
    overrides:
      ports:
        - '4551:4551'

events:
  pre-start:
    - pg: rm -f /tmp/.s.PGSQL.5432.lock || true

tooling:
  npm:
    service: lambda-proxy
  node:
    service: lambda-proxy

  'db-export [file]':
    service: :host
    description: Exports database from a database service to a file
    cmd: /helpers/sql-export.sh
    user: root
    options:
      host:
        description: The database service to use
        default: database
        alias:
          - h
      stdout:
        description: Dump database to stdout
