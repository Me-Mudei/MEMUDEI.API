datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin-arm64", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

model OrgRole {
  id          String   @id @default(dbgenerated("nanoid()"))
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  member      Member[]
}

model GlobalRole {
  id          String   @id @default(dbgenerated("nanoid()"))
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User[]
}

model Member {
  id              String       @id @default(dbgenerated("nanoid()"))
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  org_role_id     String
  org_role        OrgRole      @relation(fields: [org_role_id], references: [id])
  user_id         String
  user            User         @relation(fields: [user_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model Organization {
  id         String       @id @default(dbgenerated("nanoid()"))
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  members    Member[]
  Invitation Invitation[]
}

model Invitation {
  token           String       @unique
  email           String
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  expires_at      DateTime

  @@id([email, organization_id])
}

enum AuthProvider {
  GOOGLE
  CREDENTIALS
}

model User {
  id             String       @id @default(nanoid())
  name           String
  provider       AuthProvider
  email          String       @unique
  password       String?
  external_id    String?      @unique
  global_role_id String?
  global_role    GlobalRole?  @relation(fields: [global_role_id], references: [id])
  disabled_at    DateTime?
  deleted_at     DateTime?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  properties     Property[]
  schedule       Schedule[]
  members        Member[]
}

model Property {
  id                       String                         @id @default(nanoid())
  title                    String
  description              String
  status                   String
  user                     User                           @relation(fields: [user_id], references: [id])
  user_id                  String
  property_type            PropertyType                   @relation(fields: [property_type_id], references: [id])
  property_type_id         String
  property_relationship    PropertyRelationship           @relation(fields: [property_relationship_id], references: [id])
  property_relationship_id String
  privacy_type             PrivacyType                    @relation(fields: [privacy_type_id], references: [id])
  privacy_type_id          String
  created_at               DateTime                       @default(now())
  updated_at               DateTime                       @updatedAt
  address                  Address?
  schedule                 Schedule[]
  condominium_details      PropertiesCondominiumDetails[]
  rules                    PropertiesRules[]
  property_details         PropertiesPropertyDetails[]
  floor_plans              PropertiesFloorPlans[]
  charges                  PropertiesCharges[]
  photos                   PropertiesFiles[]
}

model Schedule {
  id          String   @id @default(nanoid())
  status      String
  date_time   DateTime
  note        String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  property    Property @relation(fields: [property_id], references: [id])
  property_id String
  visitor     User     @relation(fields: [visitor_id], references: [id])
  visitor_id  String
}

model Address {
  id          String   @id @default(nanoid())
  zip_code    String
  city        String
  state       String
  street      String
  country     String
  district    String?
  complement  String?
  location    Location @relation(fields: [location_id], references: [id])
  location_id String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  property_id String   @unique
  property    Property @relation(fields: [property_id], references: [id])
}

model Location {
  id         String   @id @default(nanoid())
  lat        Float
  lng        Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  address    Address?
}

model PropertyType {
  id          String     @id @default(nanoid())
  key         String     @unique
  name        String
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  properties  Property[]
}

model PropertyRelationship {
  id          String     @id @default(nanoid())
  key         String     @unique
  name        String
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  properties  Property[]
}

model PrivacyType {
  id          String     @id @default(nanoid())
  key         String     @unique
  name        String
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  properties  Property[]
}

model FloorPlan {
  id         String                 @id @default(nanoid())
  key        String                 @unique
  name       String
  unit       String?
  created_at DateTime               @default(now())
  updated_at DateTime               @updatedAt
  properties PropertiesFloorPlans[]
}

model PropertiesFloorPlans {
  floor_plan_key String
  floor_plan     FloorPlan @relation(fields: [floor_plan_key], references: [key])
  property_id    String
  property       Property  @relation(fields: [property_id], references: [id])
  value          Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@id([property_id, floor_plan_key])
}

model PropertyDetail {
  id          String                      @id @default(nanoid())
  key         String                      @unique
  name        String
  description String?
  created_at  DateTime                    @default(now())
  updated_at  DateTime                    @updatedAt
  properties  PropertiesPropertyDetails[]
}

model PropertiesPropertyDetails {
  property_id         String
  property            Property       @relation(fields: [property_id], references: [id])
  property_detail_key String
  property_detail     PropertyDetail @relation(fields: [property_detail_key], references: [key])
  available           Boolean
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt

  @@id([property_id, property_detail_key])
}

model CondominiumDetail {
  id          String                         @id @default(nanoid())
  key         String                         @unique
  name        String
  description String?
  created_at  DateTime                       @default(now())
  updated_at  DateTime                       @updatedAt
  properties  PropertiesCondominiumDetails[]
}

model PropertiesCondominiumDetails {
  property_id            String
  property               Property          @relation(fields: [property_id], references: [id])
  condominium_detail_key String
  condominium_detail     CondominiumDetail @relation(fields: [condominium_detail_key], references: [key])
  available              Boolean
  created_at             DateTime          @default(now())
  updated_at             DateTime          @updatedAt

  @@id([property_id, condominium_detail_key])
}

model Rule {
  id          String            @id @default(nanoid())
  key         String            @unique
  name        String
  description String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  properties  PropertiesRules[]
}

model PropertiesRules {
  property_id String
  properties  Property @relation(fields: [property_id], references: [id])
  rule_key    String
  rule        Rule     @relation(fields: [rule_key], references: [key])
  allowed     Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([property_id, rule_key])
}

model Charge {
  id          String              @id @default(nanoid())
  key         String              @unique
  name        String
  description String?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  properties  PropertiesCharges[]
}

model PropertiesCharges {
  property_id String
  properties  Property @relation(fields: [property_id], references: [id])
  charge_key  String
  charge      Charge   @relation(fields: [charge_key], references: [key])
  amount      Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([property_id, charge_key])
}

model File {
  id          String            @id @default(nanoid())
  external_id String?
  url         String
  filename    String
  type        String
  subtype     String
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  properties  PropertiesFiles[]
}

model PropertiesFiles {
  property_id String
  property    Property @relation(fields: [property_id], references: [id])
  file_id     String
  file        File     @relation(fields: [file_id], references: [id])
  position    Int?
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([property_id, file_id])
}
