datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin-arm64", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

model OrgRole {
  id          String       @id @default(nanoid())
  name        String       @unique
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  member      Member[]
  invitations Invitation[]
}

model GlobalRole {
  id          String   @id @default(nanoid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User[]
}

model Member {
  id               String       @id @default(nanoid())
  merchant_id      String
  merchant         Merchant     @relation(fields: [merchant_id], references: [id])
  org_role_id      String
  org_role         OrgRole      @relation(fields: [org_role_id], references: [id])
  user_id          String?
  user             User?        @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  person_id        String?      @unique
  person           Person?      @relation(fields: [person_id], references: [id])
  properties       Property[]
  send_invitations Invitation[]

  @@unique([merchant_id, user_id])
}

model Merchant {
  id              String       @id @default(nanoid())
  company_name    String
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  members         Member[]
  invitations     Invitation[]
  properties      Property[]
  leads           Lead[]
  templates       Template[]
}

model Organization {
  id         String     @id @default(nanoid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  merchants  Merchant[]
}

model Invitation {
  email         String
  merchant_id   String
  merchant      Merchant @relation(fields: [merchant_id], references: [id])
  org_role_id   String
  org_role      OrgRole  @relation(fields: [org_role_id], references: [id])
  token_id      String
  token         Token    @relation(fields: [token_id], references: [token])
  created_by_id String
  created_by    Member   @relation(fields: [created_by_id], references: [id])

  @@id([email, merchant_id])
}

model User {
  id             String      @id @default(nanoid())
  email          String      @unique
  provider       String
  external_id    String?     @unique
  password       String?
  global_role_id String?
  global_role    GlobalRole? @relation(fields: [global_role_id], references: [id])
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  members        Member[]
}

model Person {
  id           String        @id @default(nanoid())
  email        String
  first_name   String?
  last_name    String?
  phone_number String?
  birth_date   DateTime?
  address_id   String?       @unique
  address      Address?      @relation(fields: [address_id], references: [id])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  gov_document GovDocument[]
  members      Member[]
  leads        Lead[]
  signatories  Signatory[]
}

model Address {
  id          String    @id @default(nanoid())
  zip_code    String
  city        String
  state       String
  street      String
  country     String
  district    String?
  complement  String?
  location    Location  @relation(fields: [location_id], references: [id])
  location_id String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  person      Person?
  property    Property?
}

model Location {
  id         String   @id @default(nanoid())
  lat        Float
  lng        Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  address    Address?
}

model GovDocument {
  id         String   @id @default(nanoid())
  type       String
  number     String
  country    String
  person_id  String?
  person     Person?  @relation(fields: [person_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Lead {
  merchant_id String
  merchant    Merchant @relation(fields: [merchant_id], references: [id])
  person_id   String
  person      Person   @relation(fields: [person_id], references: [id])

  @@id([merchant_id, person_id])
}

model Property {
  id            String          @id @default(nanoid())
  title         String
  description   String
  status        String          @default("pending")
  property_type String
  address_id    String          @unique
  address       Address         @relation(fields: [address_id], references: [id])
  merchant_id   String
  merchant      Merchant        @relation(fields: [merchant_id], references: [id])
  created_by_id String
  created_by    Member          @relation(fields: [created_by_id], references: [id])
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  details       Detail[]
  documents     Document[]
  media         PropertyMedia[]
}

model Detail {
  id          String   @id @default(nanoid())
  type        String
  key         String
  available   Boolean
  value       Float?
  unit        String?
  property_id String
  property    Property @relation(fields: [property_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([property_id, key])
}

model PropertyMedia {
  position    Int
  description String?
  file_id     String
  file        File     @relation(fields: [file_id], references: [id])
  property_id String
  property    Property @relation(fields: [property_id], references: [id])

  @@id([file_id, property_id])
}

model Signatory {
  external_id String?  @unique
  type        String
  status      String
  person_id   String
  person      Person   @relation(fields: [person_id], references: [id])
  document_id String
  document    Document @relation(fields: [document_id], references: [id])
  token_id    String?
  token       Token?   @relation(fields: [token_id], references: [token], onDelete: SetNull, onUpdate: Cascade)
  metadata    Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([person_id, document_id])
}

model Document {
  id          String      @id @default(nanoid())
  type        String
  status      String
  property_id String
  property    Property    @relation(fields: [property_id], references: [id])
  template_id String?
  template    Template?   @relation(fields: [template_id], references: [id])
  file_id     String?
  file        File?       @relation(fields: [file_id], references: [id])
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  signatories Signatory[]
}

model Template {
  id           String       @id @default(nanoid())
  type         String
  status       String
  merchant_id  String
  merchant     Merchant     @relation(fields: [merchant_id], references: [id])
  file_id      String
  file         File         @relation(fields: [file_id], references: [id])
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  field_groups FieldGroup[]
  Document     Document[]
}

model FieldGroup {
  id          String   @id @default(nanoid())
  key         String
  label       String
  required    Boolean
  template_id String
  template    Template @relation(fields: [template_id], references: [id])
  fields      Field[]
}

model Field {
  id             String     @id @default(nanoid())
  type           String
  key            String
  label          String
  required       Boolean
  field_group_id String
  field_group    FieldGroup @relation(fields: [field_group_id], references: [id])
}

model File {
  id            String          @id @default(nanoid())
  external_id   String          @unique
  url           String
  name          String
  type          String
  subtype       String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  property_file PropertyMedia[]
  document      Document[]
  template      Template[]
}

model Token {
  token       String       @id
  type        String
  expires     DateTime
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  invitations Invitation[]
  signatories Signatory[]
}
