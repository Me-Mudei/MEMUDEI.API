datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin-arm64", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

model OrgRole {
  id          String   @id @default(nanoid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  member      Member[]
}

model GlobalRole {
  id          String   @id @default(nanoid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User[]
}

model Member {
  merchant_id String
  merchant    Merchant @relation(fields: [merchant_id], references: [id])
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  org_role_id String
  org_role    OrgRole  @relation(fields: [org_role_id], references: [id])

  @@unique([merchant_id, user_id])
}

model Merchant {
  id              String       @id @default(nanoid())
  company_name    String
  organization_id String       @unique
  organization    Organization @relation(fields: [organization_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  customers       Customer[]
  members         Member[]
  invitations     Invitation[]
  property        Property[]
}

model Organization {
  id         String     @id @default(nanoid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  merchants  Merchant[]
}

model Invitation {
  token       String   @unique
  email       String
  merchant_id String
  merchant    Merchant @relation(fields: [merchant_id], references: [id])
  expires_at  DateTime

  @@id([email, merchant_id])
}

model User {
  id             String      @id @default(nanoid())
  email          String      @unique
  provider       String
  external_id    String?     @unique
  password       String?
  person_id      String?     @unique
  person         Person?     @relation(fields: [person_id], references: [id])
  global_role_id String?
  global_role    GlobalRole? @relation(fields: [global_role_id], references: [id])
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  members        Member[]
  Property       Property[]
}

model Person {
  id           String     @id @default(nanoid())
  first_name   String
  last_name    String
  email        String
  phone_number String?
  birth_date   DateTime?
  address_id   String?    @unique
  address      Address?   @relation(fields: [address_id], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  user         User?
  document     Document[]
  customer     Customer[]
}

model Address {
  id          String    @id @default(nanoid())
  zip_code    String
  city        String
  state       String
  street      String
  country     String
  district    String?
  complement  String?
  location    Location  @relation(fields: [location_id], references: [id])
  location_id String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Person      Person?
  Property    Property?
}

model Location {
  id         String   @id @default(nanoid())
  lat        Float
  lng        Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  address    Address?
}

model Document {
  id            String   @id @default(nanoid())
  gov_id_type   String
  gov_id_number String
  gov_country   String
  person_id     String?
  person        Person?  @relation(fields: [person_id], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Customer {
  merchant_id String
  merchant    Merchant @relation(fields: [merchant_id], references: [id])
  person_id   String
  person      Person   @relation(fields: [person_id], references: [id])

  @@id([merchant_id, person_id])
}

model Property {
  id            String   @id @default(nanoid())
  title         String
  description   String
  status        String   @default("pending")
  property_type String
  address_id    String   @unique
  address       Address  @relation(fields: [address_id], references: [id])
  merchant_id   String
  merchant      Merchant @relation(fields: [merchant_id], references: [id])
  created_by_id String
  created_by    User     @relation(fields: [created_by_id], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  details       Detail[]
  media         File[]
}

model Detail {
  id          String   @id @default(nanoid())
  type        String
  key         String
  available   Boolean
  value       Float?
  unit        String?
  property_id String
  property    Property @relation(fields: [property_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([property_id, key])
}

model File {
  id          String    @id @default(nanoid())
  external_id String    @unique
  url         String
  filename    String
  type        String
  subtype     String
  position    Int?
  description String?
  property_id String?   @unique
  property    Property? @relation(fields: [property_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}
